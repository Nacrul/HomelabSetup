#!/bin/bash

OSTYPE=$1

# config parameters
# storage location of the image files (e.g. local-lvm)
ISOSTORAGE="datapool-iso"
ISOFOLDER="/datapool/iso"
VMSTORAGE="local-lvm"
PROXMOXUSER="root"
PROXMOXIP="192.168.10.240"

if [ "$OSTYPE" = Ubuntu ]; then 
    # download image
    ssh "$PROXMOXUSER@$PROXMOXIP" "cd $ISOFOLDER && wget -nc https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img"
    IMAGENAME="focal-server-cloudimg-amd64.img"
elif [ "$OSTYPE" = Debian ]; then
    # @BUG: Hardcoded version, find better solution
    ssh "$PROXMOXUSER@$PROXMOXIP" "cd $ISOFOLDER && wget -nc https://cdimage.debian.org/cdimage/openstack/current-10/debian-10.7.2-20201230-openstack-amd64.qcow2"
    IMAGENAME="debian-10.7.2-20201230-openstack-amd64.qcow2"
else
    echo "Currently only Debian and Ubuntu are supported"
    exit 1
fi

# Execute all commands remotely on the Proxmox server
# Create the instance
ssh "$PROXMOXUSER@$PROXMOXIP" "qm create 9000 -name $OSTYPE-cloudinit -memory 1024 -net0 virtio,bridge=vmbr0 -cores 1 -sockets 1 &&

# Import the OpenStack disk image to Proxmox storage
qm importdisk 9000 $ISOFOLDER/$IMAGENAME local-lvm &&

# Attach the disk to the virtual machine
qm set 9000 -scsihw virtio-scsi-pci -virtio0 local-lvm:vm-9000-disk-0 &&

# Add a serial output
qm set 9000 -serial0 socket &&

# Set the bootdisk to the imported Openstack disk
qm set 9000 -boot c -bootdisk virtio0 &&

# Enable the Qemu agent
qm set 9000 -agent 1 &&

# Allow hotplugging of network, USB and disks
qm set 9000 -hotplug disk,network,usb &&

# Add a single vCPU (for now)
qm set 9000 -vcpus 1 &&

# Add a video output
qm set 9000 -vga qxl &&

# Set a second hard drive, using the inbuilt cloudinit drive
qm set 9000 -ide2 local-lvm:cloudinit &&

# Resize the primary boot disk (otherwise it will be around 2G by default)
# This step adds another 8G of disk space, but change this as you need to
qm resize 9000 virtio0 +8G &&

# Convert the VM to the template
qm template 9000"

